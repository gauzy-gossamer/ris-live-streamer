package main

import (
    "log"
    "reflect"
    "testing"
)

func TestConvertTime(t *testing.T) {
    timestamp := convertTime("2023-05-24 13:30:37")
    if timestamp != 1684935037 {
        t.Error("conversion error")
    }
}

var test_messages = []KafkaMessage{
    {"2023-05-24 13:30:37.471940", "10.0.255.53", "93.13.142.0/24", "178.18.224.12", "42313 25374", "42313:2 50952:64924 50952:65116", "i", "update"},
    {"2023-05-24 13:30:37.471940", "10.0.255.53", "93.13.153.0/24", "178.18.224.12", "42313 25374", "42313:2 50952:64924 50952:65116", "i", "update"},
    {"2023-05-24 13:30:37.471940", "10.0.255.53", "93.13.160.0/24", "178.18.224.12", "42313 25374", "42313:2 50952:64924 50952:65116", "i", "update"},
    {"2023-05-24 13:30:37.471940", "10.0.255.53", "93.13.130.0/24", "178.18.224.12", "42313 25374", "42313:2 50952:64924 50952:65116", "i", "update"},

    {"2023-05-24 13:30:37.473414", "10.0.255.53", "79.124.49.0/24", "178.28.227.43", "5344 50360 50360 50360 50360 50360 50360", "0:6939 0:13335 0:21100 0:21101 0:21102 0:24940 0:57463 0:62041 0:65535 50952:21050 50952:64924 5344:1008", "i", "update"},
    {"2023-05-24 13:30:37.473414", "10.0.255.53", "79.124.50.0/24", "178.28.227.43", "5344 50360 50360 50360 50360 50360 50360", "0:6939 0:13335 0:21100 0:21101 0:21102 0:24940 0:57463 0:62041 0:65535 50952:21050 50952:64924 5344:1008", "i", "update"},
    {"2023-05-24 13:30:37.473534", "10.0.255.53", "79.124.62.0/24", "178.28.227.43", "5344 50360 207812", "0:6939 0:13335 0:21100 0:21101 0:21102 0:24940 0:57463 0:62041 0:65535 50952:21050 50952:64924 5344:1008", "i", "update"},
    {"2023-05-24 13:32:11.711112",  "10.0.1.253", "130.137.99.0/24",  "188.234.147.248", "9149 16509", "9149:3100", "i", "withdraw"},
    {"2023-05-24 13:32:12.819600",  "10.0.1.253", "37.208.49.0/24", "188.143.210.30", "20445 174 34704", "20445:21408", "u", "withdraw"},
    {"2023-05-24 13:32:12.819600",  "10.0.1.253", "37.208.50.0/24", "188.143.210.30", "20445 174 34704", "20445:21408", "u", "withdraw"},

    {"2023-05-24 13:32:12.819600",  "10.0.5.251", "1.0.4.0/22", "185.143.210.30", "6939 7545 2764 38803", "50817:6939 50817:50817 50817:65301 50817:65356 50817:65422 50817:65484 50817:65500", "i", "delete"},
}

var test_responses = []BGPUpdate{
    {0, "10.0.255.53", "", "", "", "UPDATE", "i", []int{42313, 25374}, []string{}, []string{"93.13.142.0/24", "93.13.153.0/24", "93.13.160.0/24" ,"93.13.130.0/24"}, []string{}},
    {0, "10.0.255.53", "", "", "", "UPDATE", "i", []int{5344, 50360, 50360, 50360, 50360, 50360, 50360}, []string{}, []string{"79.124.49.0/24", "79.124.50.0/24"}, []string{}},
    {0, "10.0.255.53", "", "", "", "UPDATE", "i", []int{5344, 50360, 207812}, []string{}, []string{"79.124.62.0/24"}, []string{}},
    {0, "10.0.1.253", "", "", "", "WITHDRAW", "i", []int{9149, 16509}, []string{}, []string{}, []string{"130.137.99.0/24"}},
    {0, "10.0.1.253", "", "", "", "WITHDRAW", "u", []int{20445, 174, 34704}, []string{}, []string{}, []string{"37.208.49.0/24", "37.208.50.0/24"}},
    {0, "10.0.1.253", "", "", "", "WITHDRAW", "u", []int{20445, 174, 34704}, []string{}, []string{}, []string{"37.208.49.0/24", "37.208.50.0/24"}},

    {0, "10.0.5.251", "", "", "", "DELETE", "u", []int{6939, 7545, 2764, 38803}, []string{}, []string{"1.0.4.0/22"}, []string{}},

}

var message_i = 0

type ClientConnectionM2 struct {
}

func (c *ClientConnectionM2) SocketWriteJSON(message RisData) error {
    if message.Type != "ris_message" {
        log.Fatal("incorrect type")
    }
    update := message.Data.(BGPUpdate)
    test_msg := test_responses[message_i]
    message_i += 1
    if !reflect.DeepEqual(update.Announcements, test_msg.Announcements) ||
       !reflect.DeepEqual(update.Path, test_msg.Path) ||
       update.Peer != test_msg.Peer {
        log.Fatal("dont match", update, test_responses[message_i])
    }
    return nil
}

func TestBGPUpdates(t *testing.T) {
    subs := NewSubscriptions()
    cconn := &ClientConnectionM2{}
    sub := Sub{Peer:"10.0.255.53"}
    subs.Add(sub, cconn)
    sub = Sub{Peer:"10.0.1.253"}
    subs.Add(sub, cconn)
    sub = Sub{Peer:"10.0.5.251"}
    subs.Add(sub, cconn)

    ch_kafka := make(chan KafkaMessage)

    go monitorBGPUpdates(ch_kafka, subs)

    for _, v := range test_messages {
        ch_kafka <- v
    }
}
